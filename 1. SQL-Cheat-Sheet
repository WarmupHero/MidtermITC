import pymysql

connection = pymysql.connect(
    host='localhost',
    user='your_username',
    password='your_password',
    database='your_database'
)

-- === CREATE DATABASE AND TABLES ===
CREATE DATABASE my_database;  -- Creates a new database
USE my_database;  -- Selects the database to work with

CREATE TABLE employees (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    department VARCHAR(50),
    salary DECIMAL(10, 2),
    hire_date DATE
);  -- Creates a new table

CREATE TABLE suppliers (
    supplier_id INT AUTO_INCREMENT PRIMARY KEY,
    supplier_name VARCHAR(100),
    city VARCHAR(50)
);  -- Creates a suppliers table

CREATE TABLE products (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    pname VARCHAR(100),
    color VARCHAR(20),
    weight DECIMAL(10, 2)
);  -- Creates a products table

CREATE TABLE supplies (
    supplier_id INT,
    product_id INT,
    units INT,
    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);  -- Creates a supplies table

-- === INSERT DATA ===
INSERT INTO employees (name, department, salary, hire_date)
VALUES ('John Doe', 'HR', 50000, '2023-01-15');  -- Inserts a new row into employees

INSERT INTO suppliers (supplier_name, city)
VALUES ('Supplier A', 'New York'), ('Supplier B', 'San Francisco');  -- Inserts multiple rows

INSERT INTO products (pname, color, weight)
VALUES ('Product 1', 'Red', 1.2), ('Product 2', 'Blue', 2.5);  -- Inserts multiple products

INSERT INTO supplies (supplier_id, product_id, units)
VALUES (1, 1, 200), (2, 2, 150);  -- Links suppliers to products in the supplies table

-- === BASIC SELECT STATEMENTS ===
SELECT * FROM employees;  -- Selects all columns and rows
SELECT name, salary FROM employees;  -- Selects specific columns
SELECT * FROM employees WHERE department = 'HR';  -- Filters rows by a condition
SELECT * FROM employees WHERE salary > 50000 AND department = 'Engineering';  -- Filters with multiple conditions

-- === AGGREGATIONS ===
SELECT COUNT(*) AS total_employees FROM employees;  -- Counts all rows in the employees table
SELECT AVG(salary) AS average_salary FROM employees;  -- Calculates the average salary
SELECT MIN(salary) AS min_salary, MAX(salary) AS max_salary FROM employees;  -- Finds min and max salaries
SELECT department, COUNT(*) AS employee_count FROM employees GROUP BY department;  -- Groups by department

-- === SORTING ===
SELECT * FROM employees ORDER BY salary ASC;  -- Sorts rows by salary in ascending order
SELECT * FROM employees ORDER BY hire_date DESC;  -- Sorts rows by hire date in descending order

-- === JOINS ===
SELECT employees.name, employees.department, suppliers.supplier_name
FROM employees
JOIN supplies ON employees.id = supplies.supplier_id
JOIN suppliers ON suppliers.supplier_id = supplies.supplier_id;  -- Joins employees and suppliers tables

-- === SUBQUERIES ===
SELECT name FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);  -- Finds employees with above-average salaries

-- === COMMONLY USED QUERIES ===
-- Q1: Display the names of all suppliers, as well as their city
SELECT supplier_name, city FROM suppliers;

-- Q2: Display all the names of suppliers that start with ‘S’
SELECT supplier_name FROM suppliers WHERE supplier_name LIKE 'S%';

-- Q3: Count the number of products and the number of unique products based on pname
SELECT COUNT(*) AS total_products, COUNT(DISTINCT pname) AS unique_products FROM products;

-- Q4: Count the number of Red products
SELECT COUNT(*) AS red_products FROM products WHERE color = 'Red';

-- Q5: Which is the lightest product?
SELECT pname, MIN(weight) AS lightest_weight FROM products;

-- Q6: Sort products by product names, and then by product color
SELECT pname, color FROM products ORDER BY pname ASC, color ASC;

-- Q7: Sort product names by descending order
SELECT pname FROM products ORDER BY pname DESC;

-- Q8: Display the number of products for each color
SELECT color, COUNT(*) AS product_count FROM products GROUP BY color;

-- Q9: What is the name of the supplier that supplied 200 units of product 1?
SELECT suppliers.supplier_name
FROM suppliers
JOIN supplies ON suppliers.supplier_id = supplies.supplier_id
WHERE supplies.product_id = 1 AND supplies.units = 200;

-- === DELETE DATA ===
DELETE FROM employees WHERE id = 1;  -- Deletes a specific row
DELETE FROM products WHERE color = 'Red';  -- Deletes rows based on a condition

-- === UPDATE DATA ===
UPDATE employees SET salary = salary * 1.1 WHERE department = 'HR';  -- Increases salary by 10% for HR employees
UPDATE products SET color = 'Green' WHERE pname = 'Product 1';  -- Updates color of a specific product
